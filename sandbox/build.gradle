import org.gradle.internal.os.OperatingSystem

plugins {
    id 'dk.sebsa.spellbook.java-application-conventions'
}

dependencies {
    implementation project(':spellbook')
}

application {
    // Define the main class for the application.
    mainClass = 'dk.sebsa.spellbook.Sandbox'
}

ext {
    jreversion = "21.0.1+12"
}

version = "1.0a"

// DISTRIBUTION STUFF BELOW
// Get JDK
def osArch = System.getProperty("os.arch")
if (osArch.startsWith("amd64")) osArch = "x64"

def jrestring = "";
switch (project.ext.os) {
    case OperatingSystem.LINUX:
        jrestring = "OpenJDK21U-jre_${osArch}_linux_hotspot_${project.ext.jreversion.replace("+", "_")}.tar.gz"
        break
    case OperatingSystem.WINDOWS:
        jrestring = "OpenJDK21U-jre_${osArch}_windows_hotspot_${project.ext.jreversion.replace("+", "_")}.zip"
        break
}
def jreurl = "https://github.com/adoptium/temurin21-binaries/releases/download/jdk-${project.ext.jreversion}/${jrestring}";
def outString = jrestring.split("\\.")[0]

tasks.register('downloadJRE') {
    // Download jre to zip
    def f = new File(project.buildDir.getPath() + "/jre/${jrestring}")
    f.getParentFile().mkdirs();
    if (!f.exists()) {
        new URL(jreurl).withInputStream { i -> f.withOutputStream { it << i } }
    }
}

tasks.register('downloadJREUnzip', Copy) {
    dependsOn 'downloadJRE'
    from {
        if (jreurl.endsWith(".zip"))
            zipTree(project.buildDir.getPath() + "/jre/${jrestring}")
        else if (jreurl.endsWith(".tar.gz"))
            tarTree(project.buildDir.getPath() + "/jre/${jrestring}")
    }
    into project.buildDir.getPath() + "/jre/${outString}/"
}

startScripts {
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()

        windowsScriptFile.text = windowsScriptFile.text.replace('if defined JAVA_HOME goto findJavaFromJavaHome', '')
        windowsScriptFile.text = windowsScriptFile.text.replace('set JAVA_EXE=java.exe', 'SET JAVA_EXE=%~dp0/../jre/bin/javaw.exe')
        windowsScriptFile.text = windowsScriptFile.text.replace('"%JAVA_EXE%" ', 'start "" "%JAVA_EXE%" ')

        unixScriptFile.text = unixScriptFile.text.replace('if [ -n "\\$JAVA_HOME" ] ; then', 'if false ; then')
        unixScriptFile.text = unixScriptFile.text.replace('JAVACMD=java', 'JAVACMD=../jre/bin/java')
    }
}

class SandboxUnixStartScriptGenerator implements ScriptGenerator {
    void generateScript(JavaAppStartScriptGenerationDetails details, Writer destination) {
        // implementation
    }
}

class SandboxWindowsStartScriptGenerator implements ScriptGenerator {
    void generateScript(JavaAppStartScriptGenerationDetails details, Writer destination) {
        // implementation
    }
}

distributions.main {
    contents {
        from('assets') {
            into 'assets'
        }
        from("${project.buildDir.getPath()}/jre/${outString}/jdk-${project.ext.jreversion}-jre") {
            into 'jre'
        }
    }
}

def os = "";
switch (project.ext.os) {
    case OperatingSystem.LINUX:
        os = "linux"
        break
    case OperatingSystem.WINDOWS:
        os = "windows"
        break
}
distZip.setArchiveFileName("sandbox-${project.version}-${os}.zip")
distZip.dependsOn('downloadJREUnzip')
installDist.dependsOn('downloadJREUnzip')