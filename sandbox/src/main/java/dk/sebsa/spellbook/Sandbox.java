/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dk.sebsa.spellbook;

import dk.sebsa.Spellbook;
import dk.sebsa.SpellbookCapabilities;
import dk.sebsa.spellbook.asset.AssetManager;
import dk.sebsa.spellbook.asset.loading.FolderAssetProvider;
import dk.sebsa.spellbook.audio.SoundListener;
import dk.sebsa.spellbook.core.Application;
import dk.sebsa.spellbook.core.events.EngineBuildLayerStackEvent;
import dk.sebsa.spellbook.core.events.EngineBuildRenderPipelineEvent;
import dk.sebsa.spellbook.core.events.EngineCreateFirstSceneEvent;
import dk.sebsa.spellbook.core.events.EventListener;
import dk.sebsa.spellbook.debug.DebugRenderStage;
import dk.sebsa.spellbook.ecs.Camera;
import dk.sebsa.spellbook.ecs.Entity;
import dk.sebsa.spellbook.opengl.components.SpriteRenderer;
import dk.sebsa.spellbook.opengl.stages.SpriteStage;

import java.io.File;

public class Sandbox implements Application {
    public DebugLayer debugLayer;
    private static boolean isDebug = false;

    public static void main(String[] args) {
        // Parse args
        for (String arg : args)
            if (arg.equalsIgnoreCase("-debug")) {
                isDebug = true;
                break;
            }

        // Create spellbook
        if (isDebug) {
            Spellbook.start(new Sandbox(), SpellbookCapabilities.builder()
                    .spellbookDebug(true)
                    .logStoreTarget("logs/latest.log")
                    .logDisableASCIIEscapeCharacters(false)
                    .debugIMGUI(true)
                    .build()
                    .addAssetProvider(new FolderAssetProvider(new File("assets/"), "sandbox"))
            );
            return;
        }

        Spellbook.start(new Sandbox(), SpellbookCapabilities.builder()
                .spellbookDebug(false)
                .logStoreTarget("../logs/latest.log")
                .build()
                .addAssetProvider(new FolderAssetProvider(new File("../assets/"), "sandbox"))
        );
    }

    @Override
    public String name() {
        return "Sandbox";
    }

    @Override
    public String author() {
        return "Sebsa";
    }

    @Override
    public String version() {
        return "1.0b";
    }


    @EventListener
    public void engineBuildRenderPipeline(EngineBuildRenderPipelineEvent e) {
        e.builder.appendStage(new SpriteStage(e));
        e.appendUIStage();

        if (isDebug) e.builder.appendStage(new DebugRenderStage(e));
    }

    @EventListener
    public void engineBuildLayerStack(EngineBuildLayerStackEvent e) {
        debugLayer = new DebugLayer(e.logger);

        e.builder.appendLayer(new TestLayer(e.logger, debugLayer))
                .appendLayer(debugLayer);
    }

    @EventListener
    public void engineCreateFirstScene(EngineCreateFirstSceneEvent e) {
        Entity entity = new Camera(e.ROOT);
        entity.name = "Player";
        SpriteRenderer spriteRenderer = new SpriteRenderer(AssetManager.getAssetS("sandbox/32.spr"));

        spriteRenderer.scale = 2;
        spriteRenderer.layer = 1;

        entity.addComponent(spriteRenderer);
        entity.addComponent(new PlayerMovement());
        entity.addComponent(new SoundListener());
    }
}
