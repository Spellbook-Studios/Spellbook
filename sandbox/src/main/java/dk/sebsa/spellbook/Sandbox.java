/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package dk.sebsa.spellbook;

import dk.sebsa.Spellbook;
import dk.sebsa.SpellbookCapabilities;
import dk.sebsa.spellbook.asset.AssetManager;
import dk.sebsa.spellbook.asset.loading.FolderAssetProvider;
import dk.sebsa.spellbook.audio.SoundListener;
import dk.sebsa.spellbook.core.Application;
import dk.sebsa.spellbook.core.events.EngineInitEvent;
import dk.sebsa.spellbook.core.events.EngineLoadEvent;
import dk.sebsa.spellbook.core.events.LayerStack;
import dk.sebsa.spellbook.debug.DebugRenderStage;
import dk.sebsa.spellbook.ecs.Camera;
import dk.sebsa.spellbook.ecs.Entity;
import dk.sebsa.spellbook.opengl.RenderPipeline;
import dk.sebsa.spellbook.opengl.components.SpriteRenderer;
import dk.sebsa.spellbook.opengl.stages.SpriteStage;
import dk.sebsa.spellbook.opengl.stages.UIStage;
import dk.sebsa.spellbook.phys.components.SpriteCollider2D;

import java.io.File;

public class Sandbox extends Application {
    public DebugLayer debugLayer;

    public static void main(String[] args) {
        Spellbook.start(new Sandbox(), SpellbookCapabilities.builder()
                        .spellbookDebug(true)
                        .logStoreTarget("../logs/latest.log")
                        .logDisableASCIIEscapeCharacters(false)
                        .debugIMGUI(false)
                        .build()
                .addAssetProvider(new FolderAssetProvider(new File("assets/")))
        );
    }

    @Override
    public String name() {
        return "Sandbox";
    }

    @Override
    public String author() {
        return "Sebsa";
    }

    @Override
    public String version() {
        return "1.0a";
    }

    @Override
    public RenderPipeline renderingPipeline(EngineLoadEvent e) {
        return new RenderPipeline.RenderPipelineBuilder()
                .appendStage(new SpriteStage(e))
                .appendStage(new UIStage(e.moduleCore.getWindow(), e.moduleCore.getStack()))

                .appendStage(new DebugRenderStage(e))
                .build(e.logger);
    }

    @Override
    public LayerStack layerStack(EngineInitEvent e) {
        debugLayer = new DebugLayer(e.logger);

        return new LayerStack.LayerStackBuilder()
                .appendLayer(new TestLayer(e, debugLayer))
                .appendLayer(debugLayer)
                .build();
    }

    @Override
    public void createInitialScene(Entity e) {
        Entity entity = new Camera(e);
        SpriteRenderer spriteRenderer = new SpriteRenderer(AssetManager.getAssetS("/spellbook/32.spr"));

        spriteRenderer.scale = 2;
        spriteRenderer.layer = 1;

        entity.addComponent(spriteRenderer);
        entity.addComponent(new PlayerMovement());
        entity.addComponent(new SoundListener());
        entity.addComponent(new SpriteCollider2D(spriteRenderer));
//        CircleCollider2D c = new CircleCollider2D();
//        c.radius = 32;
//        entity.addComponent(c);
    }
}
